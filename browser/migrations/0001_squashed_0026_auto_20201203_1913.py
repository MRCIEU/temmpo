# -*- coding: utf-8 -*-
# Generated by Django 1.11.29 on 2020-12-18 05:38
from datetime import timedelta
import glob
import logging
import shutil

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone

import django_rq
import mptt.fields

import browser
from browser.matching import perform_search, record_differences_between_match_runs

logger = logging.getLogger(__name__)

# Functions from the following migrations need manual copying.
# Move them and any dependencies into this file, then update the
# RunPython operations to refer to the local versions:
# browser.migrations.0009_auto_20150424_1728
def populate_filename_stubs(apps, schema_editor):
    SearchResult = apps.get_model("browser", "SearchResult")
    for result in SearchResult.objects.all():
        result.filename_stub = "results_%s_%s_topresults" % (result.id, "human")
        result.save()

# browser.migrations.0010_auto_20150515_1342
def populate_mesh_filter(apps, schema_editor):
    SearchResult = apps.get_model("browser", "SearchResult")

    # In the first instance Human text was used
    SearchResult.objects.filter(filename_stub__contains="_human_").update(mesh_filter="Human") 
    # Then the default filter was corrected
    SearchResult.objects.filter(filename_stub__contains="_humans_").update(mesh_filter="Humans") 

# browser.migrations.0013_auto_20180207_1514 (amended)
def filter_terms_by_year(apps, schema_editor):
    MeshTerm = apps.get_model("browser", "MeshTerm")
    logger.debug("Before migration - root nodes")
    logger.debug(MeshTerm.objects.root_nodes())
    root_nodes = MeshTerm.objects.root_nodes().exclude(tree_number="N/A")
    if root_nodes:
        year = 2015
        year_term = MeshTerm.objects.create(term=str(year), tree_number="N/A", year=year)
        for node in root_nodes:
            node.parent = year_term
            node.save()
    else:
        logger.debug("Found data that has already been migrated.")

    logger.debug("After migration - root nodes")
    logger.debug(MeshTerm.objects.root_nodes())

# browser.migrations.0014_auto_20180423_1519
def set_up_sites(apps, schema_editor):
    """Ensure the 4 environment types have entries in the Sites model."""
    Sites = apps.get_model('sites', 'Site')
    site_info = {'localhost:59099': 1,
                 'py-web-d0.epi.bris.ac.uk': 2,
                 'py-web-t0.epi.bris.ac.uk': 3,
                 'www.temmpo.org.uk': 4}
    for domain, site_id in site_info.items():
        Sites.objects.get_or_create(id=site_id, defaults={'domain': domain})

# browser.migrations.0016_auto_20180502_0036
def populate_mediator_match_counts(apps, schema_editor):
    SearchResult = apps.get_model('browser', 'SearchResult')
    completed_search_results = SearchResult.objects.filter(has_completed=True)
    for result in completed_search_results:
        # Using the original RESULTS_PATH to ensure older sites still requiring this migration will work.
        file_path = settings.ORIGINAL_RESULTS_PATH + result.filename_stub + '_edge.csv'
        try:
            with open(file_path, 'r') as mediator_count_csv:
                result.mediator_match_counts = len(mediator_count_csv.readlines()) - 1
                logger.debug("Setting result id %s to this count %s", result.id, result.mediator_match_counts)
                result.save()
        except Exception as e:
            logger.debug("There was a problem opening a results file and recording the count result")
            logger.debug(e)

    if not completed_search_results:
        logger.debug("No results found to update.")

# browser.migrations.0017_auto_20190529_1250
def move_results_files(apps, schema_editor):
    """Move results file from original location to a v1 sub folder, to ensure we can differentiate versions of the matching code's results"""
    logger.info("Start moving results files")
    files = glob.glob(settings.ORIGINAL_RESULTS_PATH + '*.csv')
    files.extend(glob.glob(settings.ORIGINAL_RESULTS_PATH + '*.gv'))
    files.extend(glob.glob(settings.ORIGINAL_RESULTS_PATH + '*.json'))
    for result_file in files:
        shutil.move(result_file, settings.ORIGINAL_RESULTS_PATH + 'v1/')
    logger.info("Finished moving results files")

# browser.migrations.0019_auto_20190529_1411
def reprocess_all_matches(apps, schema_editor):
    """Reprocess results files using the most recent matching code, v3"""
    logger.info("Send files for reprocessing")
    SearchResult = apps.get_model("browser", "SearchResult")
    result_ids = SearchResult.objects.all().values_list("id", flat=True)
    logger.info("%d search results exist" % result_ids.count())
    for result_id in result_ids:
        django_rq.enqueue(perform_search, result_id)
    logger.info("%d search results queued for reprocessing" % result_ids.count())

# browser.migrations.0021_auto_20190531_1625
def enqueue_comparisons(apps, schema_editor):
    SearchResult = apps.get_model("browser", "SearchResult")
    for search_result_id in SearchResult.objects.all().values_list("id", flat=True):
        django_rq.enqueue(record_differences_between_match_runs, search_result_id)

# browser.migrations.0025_auto_20200708_1638
def reprocess_and_compare(result_id):
    perform_search(result_id)
    record_differences_between_match_runs(result_id)

def enqueue_regenerating_matches(apps, schema_editor):
    """Reprocess results files using the most recent matching code, v4"""
    logger.info("Send results for reprocessing")
    SearchResult = apps.get_model("browser", "SearchResult")
    # Prioritise regeneration of Brigid and Ann's results
    priority_users = ('BMLynch', 'drbrigidmlynch', 'anndrummond', )
    priority_result_ids = SearchResult.objects.filter(criteria__upload__user__username__in=priority_users).values_list("id", flat=True)    
    logger.info("%d priority search results exist" % priority_result_ids.count())
    for result_id in priority_result_ids:
        django_rq.enqueue(reprocess_and_compare, result_id)
    logger.info("%d priority search results queued for reprocessing" % priority_result_ids.count())
    logger.info("%d priority search results queued for comparisons" % priority_result_ids.count())

    remaining_result_ids = SearchResult.objects.exclude(id__in=priority_result_ids).values_list("id", flat=True)
    logger.info("%d remaining search results exist" % remaining_result_ids.count())
    for result_id in remaining_result_ids:
        django_rq.enqueue(reprocess_and_compare, result_id)
    logger.info("%d remaining search results queued for reprocessing" % remaining_result_ids.count())
    logger.info("%d remaining search results queued for comparisons" % remaining_result_ids.count())

def create_reprocessing_message(apps, schema_editor):
    msg = "Due to bug fixes and the addition of support for matching sub MeSH terms, all results are being reprocessed. Any changes will be highlighted in the Results area. NB: This may take up to 72 hours and new search results will be delayed."
    Message = apps.get_model("browser", "Message")
    User = apps.get_model("auth", "User")
    try:
        initial_user = User.objects.get(id=1)
        # Add a message set to clear automatically in 2 weeks.
        # With expectation that after manual check the message will be disabled upon completion of the migration.
        new_msg = Message.objects.create(body=msg, user=initial_user, end=timezone.now() + timedelta(days=14))
        new_msg.save()
        logger.info("User %s created a site message, regarding reprocessing." % initial_user.username)
    except:
        logger.warning("No user existed so no site message was created.  Normally as part of dev site setup.")


class Migration(migrations.Migration):

    replaces = [('browser', '0001_initial'), ('browser', '0002_auto_20150318_1525'), ('browser', '0003_meshterm_tree_number'), ('browser', '0004_gene_synonym_for'), ('browser', '0005_auto_20150328_0831'), ('browser', '0006_auto_20150328_1228'), ('browser', '0007_auto_20150328_2227'), ('browser', '0008_auto_20150328_2331'), ('browser', '0009_auto_20150424_1728'), ('browser', '0010_auto_20150515_1342'), ('browser', '0011_auto_20151203_1814'), ('browser', '0012_auto_20180206_2354'), ('browser', '0013_auto_20180207_1514'), ('browser', '0014_auto_20180423_1519'), ('browser', '0015_searchresult_mediator_match_counts'), ('browser', '0016_auto_20180502_0036'), ('browser', '0017_auto_20190529_1250'), ('browser', '0018_searchresult_mediator_match_counts_v3'), ('browser', '0019_auto_20190529_1411'), ('browser', '0020_searchresult_has_edge_file_changed'), ('browser', '0021_auto_20190531_1625'), ('browser', '0022_message'), ('browser', '0023_auto_20190610_1919'), ('browser', '0024_searchresult_mediator_match_counts_v4'), ('browser', '0025_auto_20200708_1638'), ('browser', '0026_auto_20201203_1913')]

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('sites', '0002_alter_domain_unique'),
    ]

    operations = [
        migrations.CreateModel(
            name='Abstract',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('citation_id', models.IntegerField(verbose_name=b'Unique Identifier')),
                ('abstract', models.TextField(verbose_name=b'Abstract')),
            ],
        ),
        migrations.CreateModel(
            name='Gene',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=300)),
            ],
        ),
        migrations.CreateModel(
            name='MeshTerm',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('term', models.CharField(max_length=300)),
                ('parent_id', models.IntegerField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='SearchCriteria',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=300)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('exposure_terms', models.ManyToManyField(blank=True, help_text=b'Select one or more terms', null=True, related_name='+', to='browser.MeshTerm', verbose_name=b'exposure MeSH terms')),
                ('genes', models.ManyToManyField(blank=True, help_text=b'Enter one or more gene symbol', null=True, related_name='+', to='browser.Gene')),
                ('mediator_terms', models.ManyToManyField(blank=True, help_text=b'Select one or more terms', null=True, related_name='+', to='browser.MeshTerm', verbose_name=b'mediator MeSH terms')),
                ('outcome_terms', models.ManyToManyField(blank=True, help_text=b'Select one or more terms', null=True, related_name='+', to='browser.MeshTerm', verbose_name=b'outcome MeSH terms')),
            ],
        ),
        migrations.CreateModel(
            name='SearchResult',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mesh_filter', models.CharField(blank=True, max_length=300, null=True, verbose_name=b'MeSH filter')),
                ('results', models.FileField(blank=True, null=True, upload_to=b'')),
                ('criteria', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='search_results', to='browser.SearchCriteria')),
                ('filename_stub', models.CharField(blank=True, max_length=100, null=True)),
                ('has_completed', models.BooleanField(default=False)),
                ('ended_processing', models.DateTimeField(blank=True, null=True)),
                ('started_processing', models.DateTimeField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Upload',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('abstracts_upload', models.FileField(upload_to=browser.models.get_user_upload_location)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='uploads', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='searchcriteria',
            name='upload',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='searches', to='browser.Upload'),
        ),
        migrations.AddField(
            model_name='abstract',
            name='headings',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='browser.MeshTerm'),
        ),
        migrations.AddField(
            model_name='abstract',
            name='upload',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='abstracts', to='browser.Upload'),
        ),
        migrations.RemoveField(
            model_name='meshterm',
            name='parent_id',
        ),
        migrations.AddField(
            model_name='meshterm',
            name='level',
            field=models.PositiveIntegerField(db_index=True, default=0, editable=False),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='meshterm',
            name='lft',
            field=models.PositiveIntegerField(db_index=True, default=0, editable=False),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='meshterm',
            name='parent',
            field=mptt.fields.TreeForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='browser.MeshTerm'),
        ),
        migrations.AddField(
            model_name='meshterm',
            name='rght',
            field=models.PositiveIntegerField(db_index=True, default=0, editable=False),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='meshterm',
            name='tree_id',
            field=models.PositiveIntegerField(db_index=True, default=0, editable=False),
            preserve_default=False,
        ),
        migrations.AlterField(
            model_name='searchcriteria',
            name='name',
            field=models.CharField(blank=True, default=b'', help_text=b'Optional name for search criteria', max_length=300),
        ),
        migrations.AddField(
            model_name='meshterm',
            name='tree_number',
            field=models.CharField(default='', max_length=50),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='gene',
            name='synonym_for',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='primary_gene', to='browser.Gene'),
        ),
        migrations.AlterField(
            model_name='searchcriteria',
            name='exposure_terms',
            field=models.ManyToManyField(blank=True, help_text=b'Select one or more terms', null=True, related_name='sc_exposure', to='browser.MeshTerm', verbose_name=b'exposure MeSH terms'),
        ),
        migrations.AlterField(
            model_name='searchcriteria',
            name='genes',
            field=models.ManyToManyField(blank=True, help_text=b'Enter one or more gene symbol', null=True, related_name='sc_gene', to='browser.Gene'),
        ),
        migrations.AlterField(
            model_name='searchcriteria',
            name='mediator_terms',
            field=models.ManyToManyField(blank=True, help_text=b'Select one or more terms', null=True, related_name='sc_mediator', to='browser.MeshTerm', verbose_name=b'mediator MeSH terms'),
        ),
        migrations.AlterField(
            model_name='searchcriteria',
            name='outcome_terms',
            field=models.ManyToManyField(blank=True, help_text=b'Select one or more terms', null=True, related_name='sc_outcome', to='browser.MeshTerm', verbose_name=b'outcome MeSH terms'),
        ),
        migrations.RunPython(
            code=populate_filename_stubs,
        ),
        migrations.RunPython(
            code=populate_mesh_filter,
        ),
        migrations.AddField(
            model_name='upload',
            name='file_format',
            field=models.CharField(choices=[(b'ovid', b'Ovid'), (b'pubmed', b'PubMed')], default=b'ovid', max_length=6),
        ),
        migrations.AlterField(
            model_name='searchcriteria',
            name='exposure_terms',
            field=models.ManyToManyField(blank=True, help_text=b'Select one or more terms', related_name='sc_exposure', to='browser.MeshTerm', verbose_name=b'exposure MeSH terms'),
        ),
        migrations.AlterField(
            model_name='searchcriteria',
            name='genes',
            field=models.ManyToManyField(blank=True, help_text=b'Enter one or more gene symbol', related_name='sc_gene', to='browser.Gene'),
        ),
        migrations.AlterField(
            model_name='searchcriteria',
            name='mediator_terms',
            field=models.ManyToManyField(blank=True, help_text=b'Select one or more terms', related_name='sc_mediator', to='browser.MeshTerm', verbose_name=b'mediator MeSH terms'),
        ),
        migrations.AlterField(
            model_name='searchcriteria',
            name='outcome_terms',
            field=models.ManyToManyField(blank=True, help_text=b'Select one or more terms', related_name='sc_outcome', to='browser.MeshTerm', verbose_name=b'outcome MeSH terms'),
        ),
        migrations.RemoveField(
            model_name='abstract',
            name='headings',
        ),
        migrations.RemoveField(
            model_name='abstract',
            name='upload',
        ),
        migrations.AddField(
            model_name='meshterm',
            name='year',
            field=models.PositiveSmallIntegerField(db_index=True, default=2015),
        ),
        migrations.AddField(
            model_name='searchcriteria',
            name='mesh_terms_year_of_release',
            field=models.PositiveSmallIntegerField(default=2015),
        ),
        migrations.AlterField(
            model_name='meshterm',
            name='tree_number',
            field=models.CharField(max_length=250),
        ),
        migrations.DeleteModel(
            name='Abstract',
        ),
        migrations.RunPython(
            code=filter_terms_by_year,
        ),
        migrations.RunPython(
            code=set_up_sites,
        ),
        migrations.AddField(
            model_name='searchresult',
            name='mediator_match_counts',
            field=models.PositiveIntegerField(blank=True, null=True),
        ),
        migrations.RunPython(
            code=populate_mediator_match_counts,
        ),
        migrations.RunPython(
            code=move_results_files,
        ),
        migrations.AddField(
            model_name='searchresult',
            name='mediator_match_counts_v3',
            field=models.PositiveIntegerField(blank=True, null=True),
        ),
        migrations.RunPython(
            code=reprocess_all_matches,
        ),
        migrations.AddField(
            model_name='searchresult',
            name='has_edge_file_changed',
            field=models.BooleanField(default=False),
        ),
        migrations.RunPython(
            code=enqueue_comparisons,
        ),
        migrations.CreateModel(
            name='Message',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('body', models.CharField(max_length=500)),
                ('start', models.DateTimeField(default=django.utils.timezone.now)),
                ('end', models.DateTimeField(blank=True, null=True)),
                ('is_disabled', models.BooleanField(default=False)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='author', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='searchresult',
            name='mediator_match_counts_v4',
            field=models.PositiveIntegerField(blank=True, null=True),
        ),
        migrations.RunPython(
            code=enqueue_regenerating_matches,
        ),
        migrations.RunPython(
            code=create_reprocessing_message,
        ),
        migrations.AlterField(
            model_name='meshterm',
            name='level',
            field=models.PositiveIntegerField(editable=False),
        ),
        migrations.AlterField(
            model_name='meshterm',
            name='lft',
            field=models.PositiveIntegerField(editable=False),
        ),
        migrations.AlterField(
            model_name='meshterm',
            name='rght',
            field=models.PositiveIntegerField(editable=False),
        ),
        migrations.AlterField(
            model_name='searchcriteria',
            name='exposure_terms',
            field=models.ManyToManyField(blank=True, help_text='Select one or more terms', related_name='sc_exposure', to='browser.MeshTerm', verbose_name='exposure MeSH terms'),
        ),
        migrations.AlterField(
            model_name='searchcriteria',
            name='genes',
            field=models.ManyToManyField(blank=True, help_text='Enter one or more gene symbol', related_name='sc_gene', to='browser.Gene'),
        ),
        migrations.AlterField(
            model_name='searchcriteria',
            name='mediator_terms',
            field=models.ManyToManyField(blank=True, help_text='Select one or more terms', related_name='sc_mediator', to='browser.MeshTerm', verbose_name='mediator MeSH terms'),
        ),
        migrations.AlterField(
            model_name='searchcriteria',
            name='name',
            field=models.CharField(blank=True, default='', help_text='Optional name for search criteria', max_length=300),
        ),
        migrations.AlterField(
            model_name='searchcriteria',
            name='outcome_terms',
            field=models.ManyToManyField(blank=True, help_text='Select one or more terms', related_name='sc_outcome', to='browser.MeshTerm', verbose_name='outcome MeSH terms'),
        ),
        migrations.AlterField(
            model_name='searchresult',
            name='mesh_filter',
            field=models.CharField(blank=True, max_length=300, null=True, verbose_name='MeSH filter'),
        ),
        migrations.AlterField(
            model_name='searchresult',
            name='results',
            field=models.FileField(blank=True, null=True, upload_to=''),
        ),
        migrations.AlterField(
            model_name='upload',
            name='file_format',
            field=models.CharField(choices=[('ovid', 'Ovid'), ('pubmed', 'PubMed')], default='ovid', max_length=6),
        ),
    ]
