# -*- coding: utf-8 -*-
# Generated by Django 1.11.29 on 2020-07-05 00:12
from __future__ import unicode_literals
from datetime import timedelta
import django_rq
import logging

from django.db import migrations, models
from django.utils import timezone

from browser.matching import perform_search, record_differences_between_match_runs

logger = logging.getLogger(__name__)


def enqueue_regenerating_matches(apps, schema_editor):
    """Reprocess results files using the most recent matching code, v4"""
    logger.info("Send results for reprocessing")
    SearchResult = apps.get_model("browser", "SearchResult")
    priority_users = ('BMLynch', 'drbrigidmlynch', 'anndrummond', )

    priority_result_ids = SearchResult.objects.filter(criteria__upload__user__username__in=priority_users).values_list("id", flat=True)
    remaining_result_ids = SearchResult.objects.exclude(id__in=priority_result_ids).values_list("id", flat=True)
    # Prioritise regeneration of Brigid and Ann's results
    logger.info("%d priority search results exist" % priority_result_ids.count())
    for result_id in priority_result_ids:
        django_rq.enqueue(perform_search, result_id)
        django_rq.enqueue(record_differences_between_match_runs, result_id)
    logger.info("%d priority search results queued for reprocessing and comparisons" % priority_result_ids.count())

    logger.info("%d remaining search results exist" % remaining_result_ids.count())
    for result_id in remaining_result_ids:
        django_rq.enqueue(perform_search, result_id)
        django_rq.enqueue(record_differences_between_match_runs, result_id)
    logger.info("%d remaining search results queued for reprocessing and comparisons" % remaining_result_ids.count())


def create_reprocessing_message(apps, schema_editor):
    #Â TODO Does not seem to work
    msg = "Due to bug fixes and the addition of support for matching sub MeSH terms, all results are being reprocessed. Any changes will be highlighted in the Results area. NB: This may take up to 72 hours and new search results will be delayed."
    Message = apps.get_model("browser", "Message")
    User = apps.get_model("auth", "User")
    try:
        initial_user = User.objects.get(id=1)
    except:
        initial_user = User(email="messenger@example.org", username="messenger")
        initial_user.save()
        logger.warning("No user existed so one was created.")

    # Add a message set to clear automatically in 2 weeks.
    # With expectation that after manual check the message will be disabled upon completion of the migration.
    new_msg = Message.objects.create(body=msg, user=initial_user, end=timezone.now() + timedelta(days=14))
    new_msg.save()
    logger.info("User %s created a site message, regarding reprocessing." % initial_user.username)

class Migration(migrations.Migration):

    dependencies = [
        ('browser', '0023_auto_20190610_1919'),
    ]

    operations = [
        migrations.AddField(
            model_name='searchresult',
            name='mediator_match_counts_v4',
            field=models.PositiveIntegerField(blank=True, null=True),
        ),

    migrations.RunPython(enqueue_regenerating_matches),
    migrations.RunPython(create_reprocessing_message),

    ]
